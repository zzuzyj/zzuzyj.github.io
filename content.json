{"meta":{"title":"Hexo","subtitle":"","description":"","author":"John Doe","url":"http://zzuzyj.github.io","root":"/"},"pages":[{"title":"404 Not Found：该页无法显示","date":"2022-04-18T11:52:10.733Z","updated":"2022-04-18T11:52:10.733Z","comments":false,"path":"/404.html","permalink":"http://zzuzyj.github.io/404.html","excerpt":"","text":""},{"title":"书单","date":"2022-04-18T11:52:10.735Z","updated":"2022-04-18T11:52:10.735Z","comments":false,"path":"books/index.html","permalink":"http://zzuzyj.github.io/books/index.html","excerpt":"","text":""},{"title":"分类","date":"2022-04-18T11:52:10.736Z","updated":"2022-04-18T11:52:10.736Z","comments":false,"path":"categories/index.html","permalink":"http://zzuzyj.github.io/categories/index.html","excerpt":"","text":""},{"title":"关于","date":"2022-04-18T11:52:10.734Z","updated":"2022-04-18T11:52:10.734Z","comments":false,"path":"about/index.html","permalink":"http://zzuzyj.github.io/about/index.html","excerpt":"","text":"个人详细介绍"},{"title":"标签","date":"2022-04-18T11:52:10.738Z","updated":"2022-04-18T11:52:10.738Z","comments":false,"path":"tags/index.html","permalink":"http://zzuzyj.github.io/tags/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2022-04-18T11:52:10.736Z","updated":"2022-04-18T11:52:10.736Z","comments":true,"path":"links/index.html","permalink":"http://zzuzyj.github.io/links/index.html","excerpt":"","text":""},{"title":"Repositories","date":"2022-04-18T11:52:10.737Z","updated":"2022-04-18T11:52:10.737Z","comments":false,"path":"repository/index.html","permalink":"http://zzuzyj.github.io/repository/index.html","excerpt":"","text":""}],"posts":[{"title":"CF1669(Div.4)","slug":"CF1669(Div_4)","date":"2022-04-22T05:52:24.314Z","updated":"2022-04-22T08:00:40.860Z","comments":true,"path":"2022/04/22/CF1669(Div_4)/","link":"","permalink":"http://zzuzyj.github.io/2022/04/22/CF1669(Div_4)/","excerpt":"","text":"Codeforces Round #784 (Div. 4)新人菜鸡，没有ak，说实话题目英语真没看懂，来补个题 A Division?简单if else判断语句 1234567891011121314151617#include&lt;iostream&gt;using namespace std;typedef long long ll;const int mod=1e9+7;const int maxn=1e6+10;int main()&#123; int tt;cin&gt;&gt;tt; while(tt--)&#123; cout&lt;&lt;&quot;Division &quot;&lt;&lt;endl; int n;cin&gt;&gt;n; if(n&gt;=1900)cout&lt;&lt;1&lt;&lt;endl; else if(n&gt;=1600)cout&lt;&lt;2&lt;&lt;endl; else if(n&gt;=1400)cout&lt;&lt;3&lt;&lt;endl; else cout&lt;&lt;4&lt;&lt;endl; &#125; return 0;&#125; B Triple数据范围不大，直接可以用数组存数据，最后判定是否存在ans[i]&gt;=3,if ok ,输出 i，没有输出 -1 12345678910111213141516171819202122#include&lt;iostream&gt;#include&lt;cstring&gt;using namespace std;typedef long long ll;const int maxn=2*1e5+10;int ans[maxn];int main()&#123; // freopen(&quot;out&quot;,&quot;w&quot;,stdout); int tt;cin&gt;&gt;tt; while(tt--)&#123; memset(ans,0,sizeof(ans)); int n;cin&gt;&gt;n; int flag=-1; for(int i=1;i&lt;=n;i++)&#123; int t;cin&gt;&gt;t; ans[t]++; if(ans[t]&gt;=3)flag=t; &#125; cout&lt;&lt;flag&lt;&lt;endl; &#125; return 0;&#125; C Odd/Even Incrementsc题是个奇偶判定，要求奇数位必须都是奇数或偶数，偶数位必须也都是奇数或偶数 1234567891011121314151617181920212223242526#include&lt;iostream&gt;#include&lt;cstring&gt;using namespace std;const int maxn=1e3+10;int a[maxn];int main()&#123; //freopen(&quot;in&quot;,&quot;r&quot;,stdin); //freopen(&quot;out&quot;,&quot;w&quot;,stdout); int tt;cin&gt;&gt;tt; while(tt--)&#123; memset(a,0,sizeof(a)); int n;cin&gt;&gt;n; for(int i=1;i&lt;=n;i++)cin&gt;&gt;a[i]; int flag1=a[1]%2,flag2=a[2]%2,flag=1; for(int i=3;i&lt;=n;i++)&#123; if(i%2==1)&#123; if(a[i]%2!=flag1)&#123; flag=0;break;&#125; &#125; else if(a[i]%2!=flag2)&#123;flag=0;break;&#125; &#125; if(flag)cout&lt;&lt;&quot;YES&quot;&lt;&lt;endl; else cout&lt;&lt;&quot;NO&quot;&lt;&lt;endl; &#125; return 0;&#125; D. Colorful Stamp结论判定，如果一段区间被染色，必存在r,b两种颜色，o(n)扫一遍即可 12345678910111213141516171819202122232425262728#include&lt;iostream&gt;using namespace std;int n;char a[200005];int main()&#123; //freopen(&quot;in&quot;,&quot;r&quot;,stdin); // freopen(&quot;out&quot;,&quot;w&quot;,stdout); int tt;cin&gt;&gt;tt; while(tt--)&#123; cin&gt;&gt;n; scanf(&quot;%s&quot;,a+1); bool flag=1; for(int i=1;i&lt;=n;i++)&#123; if(a[i]==&#x27;W&#x27;)continue; int j=i; while(j&lt;n&amp;&amp;a[j+1]!=&#x27;W&#x27;)j++; bool flag1=0,flag2=0; for(int k=i;k&lt;=j;k++)&#123; if(a[k]==&#x27;R&#x27;)flag1=1; if(a[k]==&#x27;B&#x27;)flag2=1; &#125; if(!(flag1&amp;&amp;flag2))flag=0; i=j; &#125; if(flag)puts(&quot;YES&quot;); else puts(&quot;NO&quot;); &#125;&#125; E. 2-Letter Strings我们可以统计只有出现重复字符的字符数，相同的话减去，用mp1存第一个位置，mp2存第二个位置，mp存字符串，出现过的话-mp[s]*2 123456789101112131415161718192021#include&lt;iostream&gt;#include&lt;map&gt;using namespace std;#define int long longmap&lt;char,int&gt;mp1,mp2;map&lt;string,int&gt;mp;signed main()&#123; //freopen(&quot;in&quot;,&quot;r&quot;,stdin); // freopen(&quot;out&quot;,&quot;w&quot;,stdout); int tt;cin&gt;&gt;tt; while(tt--)&#123; mp.clear();mp1.clear();mp2.clear(); int n;cin&gt;&gt;n;int ans=0; for(int i=1;i&lt;=n;i++)&#123; string s;cin&gt;&gt;s; ans+=((mp1[s[0]]++)+(mp2[s[1]]++)-(mp[s]++)*2); &#125; cout&lt;&lt;ans&lt;&lt;endl; &#125;&#125; F. Eating CandiesG. Fall DownH. Maximal AND","categories":[{"name":"acm","slug":"acm","permalink":"http://zzuzyj.github.io/categories/acm/"}],"tags":[{"name":"codeforces","slug":"codeforces","permalink":"http://zzuzyj.github.io/tags/codeforces/"}]},{"title":"web21-28","slug":"web21-28","date":"2022-04-21T09:32:17.916Z","updated":"2022-04-22T04:12:37.132Z","comments":true,"path":"2022/04/21/web21-28/","link":"","permalink":"http://zzuzyj.github.io/2022/04/21/web21-28/","excerpt":"","text":"web21拿到题目给的字典，抓一下包 看的群主大大的wp，太菜了，这里一定不要打对号 爆破的到","categories":[{"name":"web","slug":"web","permalink":"http://zzuzyj.github.io/categories/web/"}],"tags":[{"name":"-web -密码爆破 -ctfshow","slug":"web-密码爆破-ctfshow","permalink":"http://zzuzyj.github.io/tags/web-%E5%AF%86%E7%A0%81%E7%88%86%E7%A0%B4-ctfshow/"}]},{"title":"numpylearn","slug":"numpylearn","date":"2022-04-20T12:34:41.641Z","updated":"2022-04-22T04:44:47.642Z","comments":true,"path":"2022/04/20/numpylearn/","link":"","permalink":"http://zzuzyj.github.io/2022/04/20/numpylearn/","excerpt":"","text":"numpy初识数组array()12345import numpy as npls=[1,2,3,4,5,6,7,8]a=np.array(ls)print(a)# [1 2 3 4 5 6 7 8] 认识类型dtype12345678910111213141516import numpy as np# [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]a =np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9],dtype=np.bool)b =np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9],dtype=np.int8)c =np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9],dtype=np.uint8)d =np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9],dtype=np.float16)print(a,a.dtype)print(b,b.dtype)print(c,c.dtype)print(d,d.dtype) #[False True True True True True True True True True] bool#[0 1 2 3 4 5 6 7 8 9] int8#[0 1 2 3 4 5 6 7 8 9] uint8#[0. 1. 2. 3. 4. 5. 6. 7. 8. 9.] float16 查询属性 属性 说明 .dtype 数组元素的数据类型 .ndim 数组的维度的个数 .shape 数组的形状 .size 数组元素的总数 .itemsize 数组中的每个元素的字节大小 1234567891011121314151617181920import numpy as npa = np.array([ [4.8, 6], [4.38, 5.5], [4.45, 6], [9.5, 12.8], [3.5, 5.5], [3.5, 5.5], [9.5, 12.8], [1.875, 2.3], [1.875, 2.3], [1.875, 2.3], [4.38, 5.5], [4.4, 5.5], [4.4, 5.5], [4.4, 5.5], [4.45, 6], [4.45, 6], [4.45, 6], ])print(&quot;类型：&#123;&#125;&quot;.format(a.dtype))print(&quot;维度：&#123;&#125;&quot;.format(a.ndim))print(&quot;形状：&#123;&#125;&quot;.format(a.shape))print(&quot;元素总数：&#123;&#125;&quot;.format(a.size))print(&quot;元素字节大小：&#123;&#125;&quot;.format(a.itemsize))print(&quot;数组所占内存空间：&#123;&#125;&quot;.format(a.size*a.itemsize))# 类型：float64# 维度：2# 形状：(17, 2)# 元素总数：34# 元素字节大小：8# 数组所占内存空间：272 初始赋值 函数 说明 np.arange() 类似range()函数 np.ones(shape) 根据shape生成一个全一的数组，shape是一个元组 np.zeros(shape) 根据shape生成一个全0数组，shape是一个元组 np.linspace() 根据气质数据等间距地填充数据，形成数组 np.concatetenate() 将两个或多个数组合并成一个新的数组 np.full(shape,val) 根据shape生成一个全为val的数组 np.eye(n) 创建一个n*n的矩阵，对角线为1,其余为0 np.ones_like(a) 根据a的形状生成一个全为1的数组 np.zeros_like(a) 根据a的形状生成一个全为0的数组 np.full_like(a,val) 根据a的形状生成一个全为val的数组 1234567891011121314151617181920212223import numpy as npimport matplotlib.pyplot as plta = np.arange(10)print(&quot;&gt;&gt;&gt; &quot;, a)print(&quot;&gt;&gt;&gt; &quot;, np.arange(0.1, 2.0, 0.1))print(&quot;&gt;&gt;&gt; &quot;, np.ones(10))print(&quot;------------------------------------------------------------------------------------------&quot;)print(&quot;&gt;&gt;&gt; &quot;, np.ones((3, 3)))print(&quot;&gt;&gt;&gt; &quot;, np.zeros(8))print(&quot;------------------------------------------------------------------------------------------&quot;)print(&quot;&gt;&gt;&gt; &quot;, np.linspace(1, 2))print(&quot;&gt;&gt;&gt; &quot;, np.linspace(1, 2, endpoint=False))print(&quot;------------------------------------------------------------------------------------------&quot;)print(&quot;&gt;&gt;&gt; &quot;, np.linspace(1, 2, num=5))x1 = np.linspace(0, 1, num=10)x2 = np.linspace(1, 2, num=10)y = np.zeros(10)plt.plot(x1, y, &quot;o&quot;)plt.plot(x2, y, &quot;o&quot;)plt.show() 12345678910import numpy as npimport matplotlib.pyplot as plta = np.arange(0, 10)b = np.arange(10, 20)print(&quot;&gt;&gt;&gt; &quot;, np.concatenate((a, b)))data = np.random.normal(2, 0.1, 100000)plt.hist(data, 1000)plt.show() 123456import numpy as npimport matplotlib.pyplot as pltdata = np.random.beta(2, 2, 100000)plt.hist(data, 1000)plt.show() 等等…… 类型转换 函数 属性 .astype(new_type) 强制转换数组的数据类型 .tolist() 返回数组数据的副本作为（嵌套的）python列表 123456789101112131415import numpy as npa = np.arange(1, 5, 0.5)print(&quot;&gt;&gt;&gt; &quot;, a)print(&quot;&gt;&gt;&gt; &quot;, a.dtype)print(&quot;&gt;&gt;&gt; &quot;, a.astype(np.int32))print(&quot;------------------------------------------------------------------------------------------&quot;)a = np.array([[1, 2, 5], [6, 3, 4], [5, 6, 0]])b = a.tolist()print(&quot;&gt;&gt;&gt; &quot;, b)print(&quot;&gt;&gt;&gt; &quot;, type(b))print(&quot;------------------------------------------------------------------------------------------&quot;)a = np.array([&quot;1.2&quot;, &quot;2.4&quot;, &quot;3.1415&quot;])print(&quot;&gt;&gt;&gt; &quot;, a.itemsize * a.size)print(&quot;&gt;&gt;&gt; &quot;, a.astype(np.float64)) 索引切片12345678910111213import numpy as npa = np.arange(10)print(&quot;&gt;&gt;&gt; &quot;, a)print(&quot;&gt;&gt;&gt; &quot;, a[-1])print(&quot;&gt;&gt;&gt; &quot;, a[9])print(&quot;&gt;&gt;&gt; &quot;, a[1])print(&quot;&gt;&gt;&gt; &quot;, a[[1, 5, 2]])# &gt;&gt;&gt; [0 1 2 3 4 5 6 7 8 9]# &gt;&gt;&gt; 9# &gt;&gt;&gt; 9# &gt;&gt;&gt; # &gt;&gt;&gt; [1 5 2] 1234567891011121314151617import numpy as npa = np.arange(10)print(&quot;&gt;&gt;&gt; &quot;, a)b = [True, True, False, False, False, True, True, False, False, False]print(&quot;&gt;&gt;&gt; &quot;, a[b])print(&quot;------------------------------------------------------------------------------------------&quot;)a = np.arange(10)print(&quot;&gt;&gt;&gt; &quot;, a)print(&quot;&gt;&gt;&gt; &quot;, a[1:4])print(&quot;&gt;&gt;&gt; &quot;, a[0:6:2])# &gt;&gt;&gt; [0 1 2 3 4 5 6 7 8 9]# &gt;&gt;&gt; [0 1 5 6]# ------------------------------------------------------------------------------------------# &gt;&gt;&gt; [0 1 2 3 4 5 6 7 8 9]# &gt;&gt;&gt; [1 2 3]# &gt;&gt;&gt; [0 2 4] 1234567891011121314151617181920212223242526import numpy as npa = np.arange(10)b = a[0:6]print(&quot;&gt;&gt;&gt; &quot;, a)print(&quot;&gt;&gt;&gt; &quot;, b)b[1] = 1000print(&quot;&gt;&gt;&gt; &quot;, a)print(&quot;&gt;&gt;&gt; &quot;, b)print(&quot;------------------------------------------------------------------------------------------&quot;)a = list(range(10))b = a[0:6]print(&quot;&gt;&gt;&gt; &quot;, a)print(&quot;&gt;&gt;&gt; &quot;, b)b[1] = 1000print(&quot;&gt;&gt;&gt; &quot;, a)print(&quot;&gt;&gt;&gt; &quot;, b)# &gt;&gt;&gt; [0 1 2 3 4 5 6 7 8 9]# &gt;&gt;&gt; [0 1 2 3 4 5]# &gt;&gt;&gt; [ 0 1000 2 3 4 5 6 7 8 9]# &gt;&gt;&gt; [ 0 1000 2 3 4 5]# ------------------------------------------------------------------------------------------# &gt;&gt;&gt; [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]# &gt;&gt;&gt; [0, 1, 2, 3, 4, 5]# &gt;&gt;&gt; [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]# &gt;&gt;&gt; [0, 1000, 2, 3, 4, 5] 元素运算 函数 属性 函数 属性 abs 计算绝对值 divide 数组元素相除 fabs 计算绝对值，比abs快 floor_divide 返回整数结果，先调用divide，再调用floor函数 sqrt 以元素为单位返回数组的非负平方根 power 第一个数组元素从第二个数组逐元素提升为幂s。 square 返回输入的元素的平方 maximum 数组元素最大值 exp 计算输入数组中所有元素的指数 fmax 数组元素最大值 log 底数计算 minimum 数组元素最小值 rint 将数组的元素四舍五入 fmin 数组元素最小值 ceil 向上取整 mod 返回元素的除法余数 floor 向下取整 copysign 按元素方式将x1的符号更改为x2的符号 isnan 对nan逐个元素进行测试，并返回bool数组 greater 返回x1&gt;x2的真值 cos 返回余弦值 greater_equal 返回x1&gt;=x2的真值 sin 返回正弦值 less 返回x1&lt;x2的真值 arctanh 反双曲函数的返回值 less_equal 返回x1&lt;=x2的真值 add 逐元素添加参数 equal 返回x1=x2的真值 subtract 逐元素减去参数 not_equal 返回x1!=x2的真值 multiply 逐元素乘与参数","categories":[{"name":"python","slug":"python","permalink":"http://zzuzyj.github.io/categories/python/"}],"tags":[{"name":"numpy","slug":"numpy","permalink":"http://zzuzyj.github.io/tags/numpy/"}]},{"title":"RSA攻击","slug":"RSA","date":"2022-04-18T12:29:33.706Z","updated":"2022-04-19T03:01:04.826Z","comments":true,"path":"2022/04/18/RSA/","link":"","permalink":"http://zzuzyj.github.io/2022/04/18/RSA/","excerpt":"","text":"基础类型，给定p,q,e,c12345678910from libnum import *p=q=e=c=n=p*qphi=(p-1)*(q-1)d=invmod(e,phi)m=pow(c,d,n)print(n2s(int(m))) 可直接分解的N（p,q）运用yafu分解 运用网站在线分解 http://www.factordb.com 小e攻击e非常小，可以直接开根拿到m 123456789101112from gmpy2 import *from libnum import *k=0e=c=n=while True: m=c+n*k k+=1 flag=iroot(m,e) if(flag[0]): print(n2s(int(flag[1]))) 共模攻击（n,m相同，c,e不同）n不变，可以根据e1,e2,c1,c2,n可以不求d1,d2直接求解m e1,e2互素 gcd(e1,e2)=1 则 e1*s1+e2*s2=1,s1,s2均为整数，s1,s2一正一负，通过gmpy2 的gcdext(e1,e2)可以计算出(s1,s2)\\\\又 c_1 \\equiv m^{e_1} \\bmod n,c_2\\equiv m^{e_2}\\bmod n.\\\\ 则(c_1^{s_1}c_2^{s_2})\\bmod n = ((m^{e_1}\\bmod n)^{s_1}(m^{e_2}\\bmod n)^{s_2})\\bmod n\\\\ 化简 (c_1^{s_1}c_2^{s_2})\\bmod n = (m^{e_1s_1+e_2s_2})\\bmod n\\\\ 又e1*s1+e2*s2=1\\\\ 则c_1^{s_1}*c_2^{s_2}=m12345678910111213141516171819from gmpy2 import *from libnum import *def deattack(e1,e2,c1,c2,n): g,s1,s2=gcdext(e1,e2) if s1&lt;0: s1=-s1 c1=invert(c1,n) if s2&lt;0: s2=-s2 c2=invert(c2,n) m=pow(c1,s1,n)*pow(c2,s2,n)%n return int(m)e1=e2=c1=c2=n=flag=deattack(e1,e2,c1,c2,n)print(n2s(flag))","categories":[{"name":"Crypto","slug":"Crypto","permalink":"http://zzuzyj.github.io/categories/Crypto/"}],"tags":[{"name":"RSA","slug":"RSA","permalink":"http://zzuzyj.github.io/tags/RSA/"}]}],"categories":[{"name":"acm","slug":"acm","permalink":"http://zzuzyj.github.io/categories/acm/"},{"name":"web","slug":"web","permalink":"http://zzuzyj.github.io/categories/web/"},{"name":"python","slug":"python","permalink":"http://zzuzyj.github.io/categories/python/"},{"name":"Crypto","slug":"Crypto","permalink":"http://zzuzyj.github.io/categories/Crypto/"}],"tags":[{"name":"codeforces","slug":"codeforces","permalink":"http://zzuzyj.github.io/tags/codeforces/"},{"name":"-web -密码爆破 -ctfshow","slug":"web-密码爆破-ctfshow","permalink":"http://zzuzyj.github.io/tags/web-%E5%AF%86%E7%A0%81%E7%88%86%E7%A0%B4-ctfshow/"},{"name":"numpy","slug":"numpy","permalink":"http://zzuzyj.github.io/tags/numpy/"},{"name":"RSA","slug":"RSA","permalink":"http://zzuzyj.github.io/tags/RSA/"}]}