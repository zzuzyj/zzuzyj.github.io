<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://zzuzyj.github.io/atom.xml" rel="self"/>
  
  <link href="http://zzuzyj.github.io/"/>
  <updated>2022-04-22T10:42:53.239Z</updated>
  <id>http://zzuzyj.github.io/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>星CTF_EZrsa</title>
    <link href="http://zzuzyj.github.io/2022/04/22/CTF_EZrsa/"/>
    <id>http://zzuzyj.github.io/2022/04/22/CTF_EZrsa/</id>
    <published>2022-04-22T08:05:47.197Z</published>
    <updated>2022-04-22T10:42:53.239Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="ezrsa">EZrsa</span></h1><h2><span id="题目">题目</span></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getStrongPrime</span><br><span class="line"><span class="keyword">from</span> gmpy <span class="keyword">import</span> next_prime</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> getrandbits</span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line"> </span><br><span class="line">p=getStrongPrime(<span class="number">1024</span>)</span><br><span class="line">q=next_prime(p^((<span class="number">1</span>&lt;&lt;<span class="number">900</span>)-<span class="number">1</span>)^getrandbits(<span class="number">300</span>))</span><br><span class="line">n=p*q</span><br><span class="line">e=<span class="number">65537</span></span><br><span class="line"> </span><br><span class="line">m=<span class="built_in">int</span>(flag.encode(<span class="string">&#x27;hex&#x27;</span>),<span class="number">16</span>)</span><br><span class="line"><span class="keyword">assert</span> m&lt;n</span><br><span class="line">c=<span class="built_in">pow</span>(m,e,n)</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(n))</span><br><span class="line"><span class="comment">#0xe78ab40c343d4985c1de167e80ba2657c7ee8c2e26d88e0026b68fe400224a3bd7e2a7103c3b01ea4d171f5cf68c8f00a64304630e07341cde0bc74ef5c88dcbb9822765df53182e3f57153b5f93ff857d496c6561c3ddbe0ce6ff64ba11d4edfc18a0350c3d0e1f8bd11b3560a111d3a3178ed4a28579c4f1e0dc17cb02c3ac38a66a230ba9a2f741f9168641c8ce28a3a8c33d523553864f014752a04737e555213f253a72f158893f80e631de2f55d1d0b2b654fc7fa4d5b3d95617e8253573967de68f6178f78bb7c4788a3a1e9778cbfc7c7fa8beffe24276b9ad85b11eed01b872b74cdc44959059c67c18b0b7a1d57512319a5e84a9a0735fa536f1b3</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(c))</span><br><span class="line"><span class="comment">#0xd7f6c90512bc9494370c3955ff3136bb245a6d1095e43d8636f66f11db525f2063b14b2a4363a96e6eb1bea1e9b2cc62b0cae7659f18f2b8e41fca557281a1e859e8e6b35bd114655b6bf5e454753653309a794fa52ff2e79433ca4bbeb1ab9a78ec49f49ebee2636abd9dd9b80306ae1b87a86c8012211bda88e6e14c58805feb6721a01481d1a7031eb3333375a81858ff3b58d8837c188ffcb982a631e1a7a603b947a6984bd78516c71cfc737aaba479688d56df2c0952deaf496a4eb3f603a46a90efbe9e82a6aef8cfb23e5fcb938c9049b227b7f15c878bd99b61b6c56db7dfff43cd457429d5dcdb5fe314f1cdf317d0c5202bad6a9770076e9b25b1</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br></pre></td></tr></table></figure><h2><span id="题目分析amp解答">题目分析&amp;解答</span></h2><p>p是1024位的随机素数，q=next_prime(p^((1&lt;&lt;900)-1)^getranbits(300)),即q是p异或1&lt;&lt;900-1再异或一个300bits的随机数的下一个素数</p><p>根据异或的性质，我们可以很容易得知p和q的高124位是相同的，而且n=p*q，且n是已经知道的</p><p>拆分p,q,</p><script type="math/tex; mode=display">p=p_{high}*2^{900}+p_{low}\\q=q_{high}*2^{900}+q_{low}\\令x=p_{high},则x也等于q_{high}\\p_{low}+q_{low}=2^{900}-1+cc,cc是300位随机数异或后的改变量，相对较小，当然不是真的小。\\n=p*q(2^{1800}*x^2+2^{900}*x(p_{low}+q_{low})\\+p_{low}*q_{low})=2^{1800}*x^2+2^{1800}*x+smallnum,两边//2^{1800}得到\\n//2^{1800}=x^2+x,x可解</script><p>直接开根可得x</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> iroot</span><br><span class="line">n=<span class="number">0xe78ab40c343d4985c1de167e80ba2657c7ee8c2e26d88e0026b68fe400224a3bd7e2a7103c3b01ea4d171f5cf68c8f00a64304630e07341cde0bc74ef5c88dcbb9822765df53182e3f57153b5f93ff857d496c6561c3ddbe0ce6ff64ba11d4edfc18a0350c3d0e1f8bd11b3560a111d3a3178ed4a28579c4f1e0dc17cb02c3ac38a66a230ba9a2f741f9168641c8ce28a3a8c33d523553864f014752a04737e555213f253a72f158893f80e631de2f55d1d0b2b654fc7fa4d5b3d95617e8253573967de68f6178f78bb7c4788a3a1e9778cbfc7c7fa8beffe24276b9ad85b11eed01b872b74cdc44959059c67c18b0b7a1d57512319a5e84a9a0735fa536f1b3</span></span><br><span class="line">nn=n//(<span class="number">2</span>**<span class="number">1800</span>)</span><br><span class="line"><span class="built_in">print</span>(iroot(nn,<span class="number">2</span>)[<span class="number">0</span>])</span><br><span class="line"><span class="comment">#20226195070633070235386534147535171929</span></span><br></pre></td></tr></table></figure><p>即x=20226195070633070235386534147535171929,</p><p>接下来就是如何求p,q了，由于p+q为定值，可知若p==q，p*q越大，当p,q越不相近p,q越小，再根据n，我们可以求出,p,q的大概值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">x=<span class="number">20226195070633070235386534147535171929</span></span><br><span class="line">p = x&lt;&lt;<span class="number">900</span> | (<span class="number">2</span>**<span class="number">900</span> - <span class="number">1</span>)</span><br><span class="line">q = x&lt;&lt;<span class="number">900</span></span><br><span class="line"><span class="comment"># Start from 125th bits (1024-125)</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">899</span>, <span class="number">301</span>, -<span class="number">1</span>):</span><br><span class="line">    cur = <span class="number">1</span>&lt;&lt;i</span><br><span class="line">    <span class="keyword">if</span> (p^^cur) * (q^^cur) &lt; n:</span><br><span class="line">      p^^= cur </span><br><span class="line">      q^^= cur</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(p))</span><br></pre></td></tr></table></figure><p>由性质可知p的大概值和真实的p存在差异，但是具体不知道，然后可以继续进行爆破，截取一部分足够的高位进行coppersmith爆破，</p><p>我们直接截取coppersmith所能爆破的最大限度，如果还没结果就寄吧</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> libnum <span class="keyword">import</span> *</span><br><span class="line">n = </span><br><span class="line">p = </span><br><span class="line">c = </span><br><span class="line">PR.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">f=x+p</span><br><span class="line">roots=f.small_roots(X=<span class="number">2</span>**<span class="number">430</span>,beta=<span class="number">0.4</span>)</span><br><span class="line">p=<span class="built_in">int</span>(p+roots[<span class="number">0</span>])</span><br><span class="line"><span class="keyword">assert</span> n%p==<span class="number">0</span></span><br><span class="line">q = n//p</span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = inverse(<span class="number">65537</span>, phi)</span><br><span class="line"><span class="built_in">print</span>(n2s(<span class="built_in">int</span>(<span class="built_in">pow</span>(c,d,n))))</span><br><span class="line"><span class="comment"># *CTF&#123;St.Diana_pls_take_me_with_you!&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;&lt;span id=&quot;ezrsa&quot;&gt;EZrsa&lt;/span&gt;&lt;/h1&gt;&lt;h2&gt;&lt;span id=&quot;题目&quot;&gt;题目&lt;/span&gt;&lt;/h2&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;s</summary>
      
    
    
    
    <category term="Crypto" scheme="http://zzuzyj.github.io/categories/Crypto/"/>
    
    
    <category term="RSA" scheme="http://zzuzyj.github.io/tags/RSA/"/>
    
  </entry>
  
  <entry>
    <title>CF1669(Div.4)</title>
    <link href="http://zzuzyj.github.io/2022/04/22/CF1669(Div_4)/"/>
    <id>http://zzuzyj.github.io/2022/04/22/CF1669(Div_4)/</id>
    <published>2022-04-22T05:52:24.314Z</published>
    <updated>2022-04-22T12:24:13.533Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><ul><li><a href="#codeforces-round-784-div-4">Codeforces Round #784 (Div. 4)</a><ul><li><a href="#a-division">A Division?</a></li><li><a href="#b-triple">B Triple</a></li><li><a href="#c-oddeven-increments">C Odd/Even Increments</a></li><li><a href="#d-colorful-stamp">D. Colorful Stamp</a></li><li><a href="#e-2-letter-strings">E. 2-Letter Strings</a></li><li><a href="#f-eating-candies">F. Eating Candies</a></li><li><a href="#g-fall-down">G. Fall Down</a></li><li><a href="#h-maximal-and">H. Maximal AND</a></li></ul></li></ul><!-- tocstop --><h1><span id="codeforces-round-784-div-4">Codeforces Round #784 (Div. 4)</span></h1><p><strong>新人菜鸡，没有ak，说实话题目英语真没看懂，来补个题</strong></p><h2><span id="a-division">A  Division?</span></h2><p><strong>简单if else判断语句</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn=<span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="type">int</span> tt;cin&gt;&gt;tt;</span><br><span class="line">   <span class="keyword">while</span>(tt--)&#123;</span><br><span class="line">       cout&lt;&lt;<span class="string">&quot;Division &quot;</span>&lt;&lt;endl;</span><br><span class="line">       <span class="type">int</span> n;cin&gt;&gt;n;</span><br><span class="line">       <span class="keyword">if</span>(n&gt;=<span class="number">1900</span>)cout&lt;&lt;<span class="number">1</span>&lt;&lt;endl;</span><br><span class="line">       <span class="keyword">else</span> <span class="keyword">if</span>(n&gt;=<span class="number">1600</span>)cout&lt;&lt;<span class="number">2</span>&lt;&lt;endl;</span><br><span class="line">       <span class="keyword">else</span> <span class="keyword">if</span>(n&gt;=<span class="number">1400</span>)cout&lt;&lt;<span class="number">3</span>&lt;&lt;endl;</span><br><span class="line">       <span class="keyword">else</span> cout&lt;&lt;<span class="number">4</span>&lt;&lt;endl;</span><br><span class="line">   &#125;       </span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="b-triple">B  Triple</span></h2><p><strong>数据范围不大，直接可以用数组存数据，最后判定是否存在ans[i]&gt;=3,if ok ,输出 i，没有输出 -1</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn=<span class="number">2</span>*<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> ans[maxn];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">   <span class="type">int</span> tt;cin&gt;&gt;tt;</span><br><span class="line">   <span class="keyword">while</span>(tt--)&#123;</span><br><span class="line">       <span class="built_in">memset</span>(ans,<span class="number">0</span>,<span class="built_in">sizeof</span>(ans));</span><br><span class="line">       <span class="type">int</span> n;cin&gt;&gt;n;</span><br><span class="line">       <span class="type">int</span> flag=<span class="number">-1</span>;</span><br><span class="line">       <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">           <span class="type">int</span> t;cin&gt;&gt;t;</span><br><span class="line">           ans[t]++;</span><br><span class="line">           <span class="keyword">if</span>(ans[t]&gt;=<span class="number">3</span>)flag=t;</span><br><span class="line">       &#125;</span><br><span class="line">       cout&lt;&lt;flag&lt;&lt;endl;</span><br><span class="line">   &#125; </span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="c-oddeven-increments">C  Odd/Even Increments</span></h2><p><strong>c题是个奇偶判定，要求奇数位必须都是奇数或偶数，偶数位必须也都是奇数或偶数</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn=<span class="number">1e3</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> a[maxn];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//freopen(&quot;in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">//freopen(&quot;out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">   <span class="type">int</span> tt;cin&gt;&gt;tt;</span><br><span class="line">   <span class="keyword">while</span>(tt--)&#123;</span><br><span class="line">       <span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="built_in">sizeof</span>(a));</span><br><span class="line">       <span class="type">int</span> n;cin&gt;&gt;n;</span><br><span class="line">       <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)cin&gt;&gt;a[i];</span><br><span class="line">       <span class="type">int</span> flag1=a[<span class="number">1</span>]%<span class="number">2</span>,flag2=a[<span class="number">2</span>]%<span class="number">2</span>,flag=<span class="number">1</span>;</span><br><span class="line">       <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">3</span>;i&lt;=n;i++)&#123;</span><br><span class="line">           <span class="keyword">if</span>(i%<span class="number">2</span>==<span class="number">1</span>)&#123;</span><br><span class="line">               <span class="keyword">if</span>(a[i]%<span class="number">2</span>!=flag1)&#123;</span><br><span class="line">               flag=<span class="number">0</span>;<span class="keyword">break</span>;&#125;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">else</span> <span class="keyword">if</span>(a[i]%<span class="number">2</span>!=flag2)&#123;flag=<span class="number">0</span>;<span class="keyword">break</span>;&#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span>(flag)cout&lt;&lt;<span class="string">&quot;YES&quot;</span>&lt;&lt;endl;</span><br><span class="line">       <span class="keyword">else</span> cout&lt;&lt;<span class="string">&quot;NO&quot;</span>&lt;&lt;endl;</span><br><span class="line">   &#125;            </span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="d-colorful-stamp">D. Colorful Stamp</span></h2><p><strong>结论判定，如果一段区间被染色，必存在r,b两种颜色，o(n)扫一遍即可</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">char</span> a[<span class="number">200005</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//freopen(&quot;in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line"><span class="type">int</span> tt;cin&gt;&gt;tt;</span><br><span class="line"><span class="keyword">while</span>(tt--)&#123;</span><br><span class="line">        cin&gt;&gt;n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,a+<span class="number">1</span>);</span><br><span class="line"><span class="type">bool</span> flag=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i]==<span class="string">&#x27;W&#x27;</span>)<span class="keyword">continue</span>;</span><br><span class="line"><span class="type">int</span> j=i;</span><br><span class="line"><span class="keyword">while</span>(j&lt;n&amp;&amp;a[j+<span class="number">1</span>]!=<span class="string">&#x27;W&#x27;</span>)j++;</span><br><span class="line"><span class="type">bool</span> flag1=<span class="number">0</span>,flag2=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> k=i;k&lt;=j;k++)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[k]==<span class="string">&#x27;R&#x27;</span>)flag1=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(a[k]==<span class="string">&#x27;B&#x27;</span>)flag2=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!(flag1&amp;&amp;flag2))flag=<span class="number">0</span>;</span><br><span class="line">i=j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(flag)<span class="built_in">puts</span>(<span class="string">&quot;YES&quot;</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">&quot;NO&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="e-2-letter-strings">E. 2-Letter Strings</span></h2><p><strong>我们可以统计只有出现重复字符的字符数，相同的话减去，用mp1存第一个位置，mp2存第二个位置，mp存字符串，出现过的话-mp[s]*2</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line">map&lt;<span class="type">char</span>,<span class="type">int</span>&gt;mp1,mp2;</span><br><span class="line">map&lt;string,<span class="type">int</span>&gt;mp;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//freopen(&quot;in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="type">int</span> tt;cin&gt;&gt;tt;</span><br><span class="line">    <span class="keyword">while</span>(tt--)&#123;</span><br><span class="line">    mp.<span class="built_in">clear</span>();mp1.<span class="built_in">clear</span>();mp2.<span class="built_in">clear</span>();</span><br><span class="line">    <span class="type">int</span> n;cin&gt;&gt;n;<span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        string s;cin&gt;&gt;s;</span><br><span class="line">        ans+=((mp1[s[<span class="number">0</span>]]++)+(mp2[s[<span class="number">1</span>]]++)-(mp[s]++)*<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2><span id="f-eating-candies">F. Eating Candies</span></h2><h2><span id="g-fall-down">G. Fall Down</span></h2><h2><span id="h-maximal-and">H. Maximal AND</span></h2>]]></content>
    
    
      
      
    <summary type="html">&lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#codeforces-round-784-div-4&quot;&gt;Codeforces Round #784 (Div. 4)&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#a-division&quot;&gt;A Division?&lt;/a&gt;</summary>
      
    
    
    
    <category term="acm" scheme="http://zzuzyj.github.io/categories/acm/"/>
    
    
    <category term="codeforces" scheme="http://zzuzyj.github.io/tags/codeforces/"/>
    
  </entry>
  
  <entry>
    <title>web21-28</title>
    <link href="http://zzuzyj.github.io/2022/04/21/web21-28/"/>
    <id>http://zzuzyj.github.io/2022/04/21/web21-28/</id>
    <published>2022-04-21T09:32:17.916Z</published>
    <updated>2022-04-22T10:43:38.764Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="web21">web21</span></h2><p>拿到题目给的字典，抓一下包</p><p><img src="http://zzuzyj.github.io/2022/04/21/web21-28/1650540592603.png" alt="1650540592603"></p><p>看的群主大大的wp，太菜了，这里一定不要打对号</p><p>爆破的到</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2&gt;&lt;span id=&quot;web21&quot;&gt;web21&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;拿到题目给的字典，抓一下包&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://zzuzyj.github.io/2022/04/21/web21-28/1650540592603.png&quot; alt=&quot;</summary>
      
    
    
    
    <category term="web" scheme="http://zzuzyj.github.io/categories/web/"/>
    
    
    <category term="web" scheme="http://zzuzyj.github.io/tags/web/"/>
    
    <category term="密码爆破" scheme="http://zzuzyj.github.io/tags/%E5%AF%86%E7%A0%81%E7%88%86%E7%A0%B4/"/>
    
    <category term="ctfshow" scheme="http://zzuzyj.github.io/tags/ctfshow/"/>
    
  </entry>
  
  <entry>
    <title>numpylearn</title>
    <link href="http://zzuzyj.github.io/2022/04/20/numpylearn/"/>
    <id>http://zzuzyj.github.io/2022/04/20/numpylearn/</id>
    <published>2022-04-20T12:34:41.641Z</published>
    <updated>2022-04-23T01:55:47.809Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><ul><li><a href="#numpy">numpy</a><ul><li><a href="#官方文档-httpsnumpyorgdocstablereference">官方文档 https://numpy.org/doc/stable/reference/</a></li><li><a href="#初识数组">初识数组</a><ul><li><a href="#初始数组">初始数组</a></li><li><a href="#认识类型">认识类型</a></li><li><a href="#查询属性">查询属性</a></li><li><a href="#初始赋值">初始赋值</a></li><li><a href="#类型转换">类型转换</a></li></ul></li><li><a href="#一维操作">一维操作</a><ul><li><a href="#索引切片">索引切片</a></li><li><a href="#元素运算">元素运算</a></li><li><a href="#矢量运算">矢量运算</a></li><li><a href="#搜索排序">搜索排序</a></li><li><a href="#数理统计">数理统计</a></li></ul></li></ul></li></ul><!-- tocstop --><h1><span id="numpy">numpy</span></h1><h2><span id="官方文档-httpsnumpyorgdocstablereference">官方文档 </span></h2><h2><span id="初识数组">初识数组</span></h2><h3><span id="初始数组">初始数组</span></h3><h4><span id="array">array()</span></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">ls=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>]</span><br><span class="line">a=np.array(ls)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="comment"># [1 2 3 4 5 6 7 8]</span></span><br></pre></td></tr></table></figure><h3><span id="认识类型">认识类型</span></h3><h4><span id="dtype">dtype</span></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</span></span><br><span class="line">a =np.array([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>],dtype=np.<span class="built_in">bool</span>)</span><br><span class="line">b =np.array([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>],dtype=np.int8)</span><br><span class="line">c =np.array([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>],dtype=np.uint8)</span><br><span class="line">d =np.array([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>],dtype=np.float16)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a,a.dtype)</span><br><span class="line"><span class="built_in">print</span>(b,b.dtype)</span><br><span class="line"><span class="built_in">print</span>(c,c.dtype)</span><br><span class="line"><span class="built_in">print</span>(d,d.dtype) </span><br><span class="line"><span class="comment">#[False  True  True  True  True  True  True  True  True  True] bool</span></span><br><span class="line"><span class="comment">#[0 1 2 3 4 5 6 7 8 9] int8</span></span><br><span class="line"><span class="comment">#[0 1 2 3 4 5 6 7 8 9] uint8</span></span><br><span class="line"><span class="comment">#[0. 1. 2. 3. 4. 5. 6. 7. 8. 9.] float16</span></span><br></pre></td></tr></table></figure><h3><span id="查询属性">查询属性</span></h3><div class="table-container"><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>.dtype</td><td>数组元素的数据类型</td></tr><tr><td>.ndim</td><td>数组的维度的个数</td></tr><tr><td>.shape</td><td>数组的形状</td></tr><tr><td>.size</td><td>数组元素的总数</td></tr><tr><td>.itemsize</td><td>数组中的每个元素的字节大小</td></tr></tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.array([</span><br><span class="line">    [<span class="number">4.8</span>, <span class="number">6</span>], [<span class="number">4.38</span>, <span class="number">5.5</span>], [<span class="number">4.45</span>, <span class="number">6</span>], [<span class="number">9.5</span>, <span class="number">12.8</span>],</span><br><span class="line">    [<span class="number">3.5</span>, <span class="number">5.5</span>], [<span class="number">3.5</span>, <span class="number">5.5</span>], [<span class="number">9.5</span>, <span class="number">12.8</span>], [<span class="number">1.875</span>, <span class="number">2.3</span>],</span><br><span class="line">    [<span class="number">1.875</span>, <span class="number">2.3</span>], [<span class="number">1.875</span>, <span class="number">2.3</span>], [<span class="number">4.38</span>, <span class="number">5.5</span>], [<span class="number">4.4</span>, <span class="number">5.5</span>],</span><br><span class="line">    [<span class="number">4.4</span>, <span class="number">5.5</span>], [<span class="number">4.4</span>, <span class="number">5.5</span>], [<span class="number">4.45</span>, <span class="number">6</span>], [<span class="number">4.45</span>, <span class="number">6</span>], [<span class="number">4.45</span>, <span class="number">6</span>], ])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;类型：&#123;&#125;&quot;</span>.<span class="built_in">format</span>(a.dtype))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;维度：&#123;&#125;&quot;</span>.<span class="built_in">format</span>(a.ndim))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;形状：&#123;&#125;&quot;</span>.<span class="built_in">format</span>(a.shape))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;元素总数：&#123;&#125;&quot;</span>.<span class="built_in">format</span>(a.size))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;元素字节大小：&#123;&#125;&quot;</span>.<span class="built_in">format</span>(a.itemsize))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;数组所占内存空间：&#123;&#125;&quot;</span>.<span class="built_in">format</span>(a.size*a.itemsize))</span><br><span class="line"><span class="comment"># 类型：float64</span></span><br><span class="line"><span class="comment"># 维度：2</span></span><br><span class="line"><span class="comment"># 形状：(17, 2)</span></span><br><span class="line"><span class="comment"># 元素总数：34</span></span><br><span class="line"><span class="comment"># 元素字节大小：8</span></span><br><span class="line"><span class="comment"># 数组所占内存空间：272</span></span><br></pre></td></tr></table></figure><h3><span id="初始赋值">初始赋值</span></h3><div class="table-container"><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>np.arange()</td><td>类似range()函数</td></tr><tr><td>np.ones(shape)</td><td>根据shape生成一个全一的数组，shape是一个元组</td></tr><tr><td>np.zeros(shape)</td><td>根据shape生成一个全0数组，shape是一个元组</td></tr><tr><td>np.linspace()</td><td>根据气质数据等间距地填充数据，形成数组</td></tr><tr><td>np.concatetenate()</td><td>将两个或多个数组合并成一个新的数组</td></tr><tr><td>np.full(shape,val)</td><td>根据shape生成一个全为val的数组</td></tr><tr><td>np.eye(n)</td><td>创建一个n*n的矩阵，对角线为1,其余为0</td></tr><tr><td>np.ones_like(a)</td><td>根据a的形状生成一个全为1的数组</td></tr><tr><td>np.zeros_like(a)</td><td>根据a的形状生成一个全为0的数组</td></tr><tr><td>np.full_like(a,val)</td><td>根据a的形状生成一个全为val的数组</td></tr></tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">a = np.arange(<span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&gt;&gt;&gt; &quot;</span>, a)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&gt;&gt;&gt; &quot;</span>, np.arange(<span class="number">0.1</span>, <span class="number">2.0</span>, <span class="number">0.1</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&gt;&gt;&gt; &quot;</span>, np.ones(<span class="number">10</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;------------------------------------------------------------------------------------------&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&gt;&gt;&gt; &quot;</span>, np.ones((<span class="number">3</span>, <span class="number">3</span>)))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&gt;&gt;&gt; &quot;</span>, np.zeros(<span class="number">8</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;------------------------------------------------------------------------------------------&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&gt;&gt;&gt; &quot;</span>, np.linspace(<span class="number">1</span>, <span class="number">2</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&gt;&gt;&gt; &quot;</span>, np.linspace(<span class="number">1</span>, <span class="number">2</span>, endpoint=<span class="literal">False</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;------------------------------------------------------------------------------------------&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&gt;&gt;&gt; &quot;</span>, np.linspace(<span class="number">1</span>, <span class="number">2</span>, num=<span class="number">5</span>))</span><br><span class="line"></span><br><span class="line">x1 = np.linspace(<span class="number">0</span>, <span class="number">1</span>, num=<span class="number">10</span>)</span><br><span class="line">x2 = np.linspace(<span class="number">1</span>, <span class="number">2</span>, num=<span class="number">10</span>)</span><br><span class="line">y = np.zeros(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">plt.plot(x1, y, <span class="string">&quot;o&quot;</span>)</span><br><span class="line">plt.plot(x2, y, <span class="string">&quot;o&quot;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="http://zzuzyj.github.io/2022/04/20/numpylearn/1650545098976.png" alt="1650545098976"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">a = np.arange(<span class="number">0</span>, <span class="number">10</span>)</span><br><span class="line">b = np.arange(<span class="number">10</span>, <span class="number">20</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&gt;&gt;&gt; &quot;</span>, np.concatenate((a, b)))</span><br><span class="line"></span><br><span class="line">data = np.random.normal(<span class="number">2</span>, <span class="number">0.1</span>, <span class="number">100000</span>)</span><br><span class="line">plt.hist(data, <span class="number">1000</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="http://zzuzyj.github.io/2022/04/20/numpylearn/1650545211924.png" alt="1650545211924"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">data = np.random.beta(<span class="number">2</span>, <span class="number">2</span>, <span class="number">100000</span>)</span><br><span class="line">plt.hist(data, <span class="number">1000</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="http://zzuzyj.github.io/2022/04/20/numpylearn/1650545355513.png" alt="1650545355513"></p><p>等等……</p><h3><span id="类型转换">类型转换</span></h3><div class="table-container"><table><thead><tr><th>函数</th><th>属性</th></tr></thead><tbody><tr><td>.astype(new_type)</td><td>强制转换数组的数据类型</td></tr><tr><td>.tolist()</td><td>返回数组数据的副本作为（嵌套的）python列表</td></tr></tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.arange(<span class="number">1</span>, <span class="number">5</span>, <span class="number">0.5</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&gt;&gt;&gt; &quot;</span>, a)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&gt;&gt;&gt; &quot;</span>, a.dtype)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&gt;&gt;&gt; &quot;</span>, a.astype(np.int32))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;------------------------------------------------------------------------------------------&quot;</span>)</span><br><span class="line">a = np.array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>], [<span class="number">6</span>, <span class="number">3</span>, <span class="number">4</span>], [<span class="number">5</span>, <span class="number">6</span>, <span class="number">0</span>]])</span><br><span class="line">b = a.tolist()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&gt;&gt;&gt; &quot;</span>, b)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&gt;&gt;&gt; &quot;</span>, <span class="built_in">type</span>(b))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;------------------------------------------------------------------------------------------&quot;</span>)</span><br><span class="line">a = np.array([<span class="string">&quot;1.2&quot;</span>, <span class="string">&quot;2.4&quot;</span>, <span class="string">&quot;3.1415&quot;</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&gt;&gt;&gt; &quot;</span>, a.itemsize * a.size)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&gt;&gt;&gt; &quot;</span>, a.astype(np.float64))</span><br></pre></td></tr></table></figure><h2><span id="一维操作">一维操作</span></h2><h3><span id="索引切片">索引切片</span></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.arange(<span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&gt;&gt;&gt; &quot;</span>, a)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&gt;&gt;&gt; &quot;</span>, a[-<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&gt;&gt;&gt; &quot;</span>, a[<span class="number">9</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&gt;&gt;&gt; &quot;</span>, a[<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&gt;&gt;&gt; &quot;</span>, a[[<span class="number">1</span>, <span class="number">5</span>, <span class="number">2</span>]])</span><br><span class="line"><span class="comment"># &gt;&gt;&gt;  [0 1 2 3 4 5 6 7 8 9]</span></span><br><span class="line"><span class="comment"># &gt;&gt;&gt;  9</span></span><br><span class="line"><span class="comment"># &gt;&gt;&gt;  9</span></span><br><span class="line"><span class="comment"># &gt;&gt;&gt;  </span></span><br><span class="line"><span class="comment"># &gt;&gt;&gt;  [1 5 2]</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.arange(<span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&gt;&gt;&gt; &quot;</span>, a)</span><br><span class="line">b = [<span class="literal">True</span>, <span class="literal">True</span>, <span class="literal">False</span>, <span class="literal">False</span>, <span class="literal">False</span>, <span class="literal">True</span>, <span class="literal">True</span>, <span class="literal">False</span>, <span class="literal">False</span>, <span class="literal">False</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&gt;&gt;&gt; &quot;</span>, a[b])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;------------------------------------------------------------------------------------------&quot;</span>)</span><br><span class="line">a = np.arange(<span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&gt;&gt;&gt; &quot;</span>, a)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&gt;&gt;&gt; &quot;</span>, a[<span class="number">1</span>:<span class="number">4</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&gt;&gt;&gt; &quot;</span>, a[<span class="number">0</span>:<span class="number">6</span>:<span class="number">2</span>])</span><br><span class="line"><span class="comment"># &gt;&gt;&gt;  [0 1 2 3 4 5 6 7 8 9]</span></span><br><span class="line"><span class="comment"># &gt;&gt;&gt;  [0 1 5 6]</span></span><br><span class="line"><span class="comment"># ------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># &gt;&gt;&gt;  [0 1 2 3 4 5 6 7 8 9]</span></span><br><span class="line"><span class="comment"># &gt;&gt;&gt;  [1 2 3]</span></span><br><span class="line"><span class="comment"># &gt;&gt;&gt;  [0 2 4]</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.arange(<span class="number">10</span>)</span><br><span class="line">b = a[<span class="number">0</span>:<span class="number">6</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&gt;&gt;&gt; &quot;</span>, a)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&gt;&gt;&gt; &quot;</span>, b)</span><br><span class="line">b[<span class="number">1</span>] = <span class="number">1000</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&gt;&gt;&gt; &quot;</span>, a)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&gt;&gt;&gt; &quot;</span>, b)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;------------------------------------------------------------------------------------------&quot;</span>)</span><br><span class="line">a = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">10</span>))</span><br><span class="line">b = a[<span class="number">0</span>:<span class="number">6</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&gt;&gt;&gt; &quot;</span>, a)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&gt;&gt;&gt; &quot;</span>, b)</span><br><span class="line">b[<span class="number">1</span>] = <span class="number">1000</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&gt;&gt;&gt; &quot;</span>, a)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&gt;&gt;&gt; &quot;</span>, b)</span><br><span class="line"><span class="comment"># &gt;&gt;&gt;  [0 1 2 3 4 5 6 7 8 9]</span></span><br><span class="line"><span class="comment"># &gt;&gt;&gt;  [0 1 2 3 4 5]</span></span><br><span class="line"><span class="comment"># &gt;&gt;&gt;  [   0 1000    2    3    4    5    6    7    8    9]</span></span><br><span class="line"><span class="comment"># &gt;&gt;&gt;  [   0 1000    2    3    4    5]</span></span><br><span class="line"><span class="comment"># ------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># &gt;&gt;&gt;  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</span></span><br><span class="line"><span class="comment"># &gt;&gt;&gt;  [0, 1, 2, 3, 4, 5]</span></span><br><span class="line"><span class="comment"># &gt;&gt;&gt;  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</span></span><br><span class="line"><span class="comment"># &gt;&gt;&gt;  [0, 1000, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure><h3><span id="元素运算">元素运算</span></h3><div class="table-container"><table><thead><tr><th>函数</th><th>属性</th><th>函数</th><th>属性</th></tr></thead><tbody><tr><td>abs</td><td>计算绝对值</td><td>divide</td><td>数组元素相除</td></tr><tr><td>fabs</td><td>计算绝对值，比abs快</td><td>floor_divide</td><td>返回整数结果，先调用divide，再调用floor函数</td></tr><tr><td>sqrt</td><td>以元素为单位返回数组的非负平方根</td><td>power</td><td>第一个数组元素从第二个数组逐元素提升为幂s。</td></tr><tr><td>square</td><td>返回输入的元素的平方</td><td>maximum</td><td>数组元素最大值</td></tr><tr><td>exp</td><td>计算输入数组中所有元素的指数</td><td>fmax</td><td>数组元素最大值</td></tr><tr><td>log</td><td>底数计算</td><td>minimum</td><td>数组元素最小值</td></tr><tr><td>rint</td><td>将数组的元素四舍五入</td><td>fmin</td><td>数组元素最小值</td></tr><tr><td>ceil</td><td>向上取整</td><td>mod</td><td>返回元素的除法余数</td></tr><tr><td>floor</td><td>向下取整</td><td>copysign</td><td>按元素方式将x1的符号更改为x2的符号</td></tr><tr><td>isnan</td><td>对nan逐个元素进行测试，并返回bool数组</td><td>greater</td><td>返回x1&gt;x2的真值</td></tr><tr><td>cos</td><td>返回余弦值</td><td>greater_equal</td><td>返回x1&gt;=x2的真值</td></tr><tr><td>sin</td><td>返回正弦值</td><td>less</td><td>返回x1&lt;x2的真值</td></tr><tr><td>arctanh</td><td>反双曲函数的返回值</td><td>less_equal</td><td>返回x1&lt;=x2的真值</td></tr><tr><td>add</td><td>逐元素相加</td><td>equal</td><td>返回x1=x2的真值</td></tr><tr><td>subtract</td><td>逐元素相减</td><td>not_equal</td><td>返回x1!=x2的真值</td></tr><tr><td>multiply</td><td>逐元素相乘</td><td></td></tr></tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.arange(-<span class="number">10</span>, <span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&gt;&gt;&gt; &quot;</span>, a)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&gt;&gt;&gt; &quot;</span>, np.<span class="built_in">abs</span>(a))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;------------------------------------------------------------------------------------------&quot;</span>)</span><br><span class="line">a = np.arange(<span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&gt;&gt;&gt; &quot;</span>, a)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&gt;&gt;&gt; &quot;</span>, np.sqrt(a))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;------------------------------------------------------------------------------------------&quot;</span>)</span><br><span class="line">a = np.random.randint(<span class="number">0</span>, <span class="number">100</span>, <span class="number">15</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&gt;&gt;&gt; &quot;</span>, a)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&gt;&gt;&gt; &quot;</span>, np.<span class="built_in">max</span>(a))</span><br><span class="line"><span class="comment"># &gt;&gt;&gt;  [-10  -9  -8  -7  -6  -5  -4  -3  -2  -1   0   1   2   3   4   5   6   7</span></span><br><span class="line"><span class="comment">#    8   9]</span></span><br><span class="line"><span class="comment"># &gt;&gt;&gt;  [10  9  8  7  6  5  4  3  2  1  0  1  2  3  4  5  6  7  8  9]</span></span><br><span class="line"><span class="comment"># ------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># &gt;&gt;&gt;  [0 1 2 3 4 5 6 7 8 9]</span></span><br><span class="line"><span class="comment"># &gt;&gt;&gt;  [0.         1.         1.41421356 1.73205081 2.         2.23606798</span></span><br><span class="line"><span class="comment">#  2.44948974 2.64575131 2.82842712 3.        ]</span></span><br><span class="line"><span class="comment"># ------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># &gt;&gt;&gt;  [ 1 74 33 21 22 59 57 56 26 25 85  0  8 53 38]</span></span><br><span class="line"><span class="comment"># &gt;&gt;&gt;  85</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = np.arange(<span class="number">10</span>)</span><br><span class="line">b = np.arange(<span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&gt;&gt;&gt; &quot;</span>, a, b)</span><br><span class="line">c = np.ones(<span class="number">10</span>)</span><br><span class="line">d = np.add(a, b, out=c)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&gt;&gt;&gt; &quot;</span>, c)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&gt;&gt;&gt; &quot;</span>, <span class="built_in">id</span>(c), <span class="built_in">id</span>(d))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;------------------------------------------------------------------------------------------&quot;</span>)</span><br><span class="line">a = np.array([<span class="number">3</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">0</span>])</span><br><span class="line">b = np.array([<span class="number">0</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">9</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&gt;&gt;&gt; &quot;</span>, np.maximum(a, b))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;------------------------------------------------------------------------------------------&quot;</span>)</span><br><span class="line">a = np.array([<span class="number">3</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">0</span>])</span><br><span class="line">b = np.array([<span class="number">0</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">9</span>])</span><br><span class="line">c = np.greater(a, b)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&gt;&gt;&gt; &quot;</span>, c)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&gt;&gt;&gt; &quot;</span>, a[c])</span><br><span class="line"><span class="comment"># &gt;&gt;&gt;  [0 1 2 3 4 5 6 7 8 9] [0 1 2 3 4 5 6 7 8 9]</span></span><br><span class="line"><span class="comment"># &gt;&gt;&gt;  [ 0.  2.  4.  6.  8. 10. 12. 14. 16. 18.]</span></span><br><span class="line"><span class="comment"># &gt;&gt;&gt;  2591797890768 2591797890768</span></span><br><span class="line"><span class="comment"># ------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># &gt;&gt;&gt;  [3 9 2 9 7 9 7 9]</span></span><br><span class="line"><span class="comment"># ------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># &gt;&gt;&gt;  [ True False  True False  True False  True False]</span></span><br><span class="line"><span class="comment"># &gt;&gt;&gt;  [3 2 7 7]</span></span><br></pre></td></tr></table></figure><h3><span id="矢量运算">矢量运算</span></h3><p>四则运算</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">x = np.array([<span class="number">4</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">6</span>])</span><br><span class="line">y = np.array([<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&gt;&gt;&gt; &quot;</span>, x * <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&gt;&gt;&gt; &quot;</span>, x + y, x - y, x * y, x / y)</span><br><span class="line"><span class="comment"># &gt;&gt;&gt;  [ 8  6 12 14  8  4 10 12]</span></span><br><span class="line"><span class="comment"># &gt;&gt;&gt;  [5 4 6 7 5 3 5 6] [3 2 6 7 3 1 5 6] [4 3 0 0 4 2 0 0] [ 4.  3. inf inf  4.  2. inf inf]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p> 复杂的逻辑运算和多元运算 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">x = np.array([<span class="number">4</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">6</span>])</span><br><span class="line">y = np.array([<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&gt;&gt;&gt; &quot;</span>, x &gt; <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&gt;&gt;&gt; &quot;</span>, x == <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&gt;&gt;&gt; &quot;</span>, x &lt; <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&gt;&gt;&gt; &quot;</span>, x &gt; y, x == y)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&gt;&gt;&gt; &quot;</span>, np.logical_and(x, y))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;------------------------------------------------------------------------------------------&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&gt;&gt;&gt; &quot;</span>, x[x &gt; <span class="number">5</span>])</span><br><span class="line">x[x == <span class="number">4</span>] = <span class="number">99</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&gt;&gt;&gt; &quot;</span>, x)</span><br><span class="line">x[y == <span class="number">0</span>] = <span class="number">0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&gt;&gt;&gt; &quot;</span>, x)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;------------------------------------------------------------------------------------------&quot;</span>)</span><br><span class="line">x = np.array([-<span class="number">4</span>, -<span class="number">3</span>, <span class="number">6</span>, -<span class="number">7</span>, <span class="number">4</span>, -<span class="number">2</span>, <span class="number">5</span>, -<span class="number">6</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&gt;&gt;&gt; &quot;</span>, np.where(x &gt; <span class="number">0</span>, <span class="number">1</span>, -<span class="number">1</span>))</span><br><span class="line"><span class="comment"># &gt;&gt;&gt;  [ True  True  True  True  True False  True  True]</span></span><br><span class="line"><span class="comment"># &gt;&gt;&gt;  [False False False False False  True False False]</span></span><br><span class="line"><span class="comment"># &gt;&gt;&gt;  [False False False False False False False False]</span></span><br><span class="line"><span class="comment"># &gt;&gt;&gt;  [ True  True  True  True  True  True  True  True] [False False False False False False False False]</span></span><br><span class="line"><span class="comment"># &gt;&gt;&gt;  [ True  True False False  True  True False False]</span></span><br><span class="line"><span class="comment"># ------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># &gt;&gt;&gt;  [6 7 6]</span></span><br><span class="line"><span class="comment"># &gt;&gt;&gt;  [99  3  6  7 99  2  5  6]</span></span><br><span class="line"><span class="comment"># &gt;&gt;&gt;  [99  3  0  0 99  2  0  0]</span></span><br><span class="line"><span class="comment"># ------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># &gt;&gt;&gt;  [-1 -1  1 -1  1 -1  1 -1]</span></span><br></pre></td></tr></table></figure><h3><span id="搜索排序">搜索排序</span></h3><div class="table-container"><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>numpy.sort()</td><td>返回数组的排序副本</td></tr><tr><td>ndarray.sort()</td><td>就地排序数组</td></tr><tr><td>numpy.searchsorted()</td><td>查找应在其中插入元素以保持顺序的索引</td></tr><tr><td>numpy.count_nonzero()</td><td>统计数组非0个数</td></tr><tr><td>numpy.where()</td><td>根据条件从x或者y中选择返回的元素</td></tr></tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">a = np.random.randint(<span class="number">0</span>, <span class="number">100</span>, <span class="number">200</span>)</span><br><span class="line">plt.scatter(<span class="built_in">range</span>(<span class="number">200</span>), a)</span><br><span class="line">plt.show()</span><br><span class="line">np.sort(a)</span><br><span class="line">plt.scatter(<span class="built_in">range</span>(<span class="number">200</span>), a)</span><br><span class="line">plt.show()</span><br><span class="line">a.sort()</span><br><span class="line">plt.scatter(<span class="built_in">range</span>(<span class="number">200</span>), a)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="http://zzuzyj.github.io/2022/04/20/numpylearn/1650628488044.png" alt="1650628488044"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.random.randint(<span class="number">0</span>, <span class="number">100</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">a.sort()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&gt;&gt;&gt; &quot;</span>, a)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&gt;&gt;&gt; &quot;</span>, np.searchsorted(a, <span class="number">5</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&gt;&gt;&gt; &quot;</span>, np.insert(a, np.searchsorted(a, <span class="number">5</span>), <span class="number">5</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&gt;&gt;&gt; &quot;</span>, np.append(a, <span class="number">100</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;------------------------------------------------------------------------------------------&quot;</span>)</span><br><span class="line">a = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&gt;&gt;&gt; &quot;</span>, np.where(a == <span class="number">1</span>))</span><br><span class="line">a = np.array([<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">4</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&gt;&gt;&gt; &quot;</span>, np.count_nonzero(a))</span><br><span class="line"><span class="comment"># &gt;&gt;&gt;  [11 23 32 47 57 64 68 72 86 86]</span></span><br><span class="line"><span class="comment"># &gt;&gt;&gt;  0</span></span><br><span class="line"><span class="comment"># &gt;&gt;&gt;  [ 5 11 23 32 47 57 64 68 72 86 86]</span></span><br><span class="line"><span class="comment"># &gt;&gt;&gt;  [ 11  23  32  47  57  64  68  72  86  86 100]</span></span><br><span class="line"><span class="comment"># ------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># &gt;&gt;&gt;  (array([0, 3, 4, 5], dtype=int64),)</span></span><br><span class="line"><span class="comment"># &gt;&gt;&gt;  5</span></span><br></pre></td></tr></table></figure><h3><span id="数理统计">数理统计</span></h3><h4><span id="统计函数和集合运算函数">统计函数和集合运算函数</span></h4><div class="table-container"><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>np.sum()</td><td>计算数组元素的总和</td></tr><tr><td>np.mean()</td><td>计算数组元素的平均值</td></tr><tr><td>np.std()</td><td>计算数组的标准差</td></tr><tr><td>np.average()</td><td>计算数组的加权平均值</td></tr><tr><td>np.cumsum()</td><td>数组元素的累加和(前缀和数组)</td></tr><tr><td>np.cumprod()</td><td>数组元素的累乘积</td></tr><tr><td>np.unique(x)</td><td>计算x中的唯一元素,并返回有序结果</td></tr><tr><td>np.intersectld(x,y)</td><td>计算x和y的公共元素，返回有序结果</td></tr><tr><td>np.unionld(x,y)</td><td>计算x和 y的并集，返回有序结果</td></tr><tr><td>np.inld(x,y)</td><td>得到一个表示x 的元素是否包含于y的布尔型数组</td></tr><tr><td>np.setdiffld(x,y)</td><td>集合差，即元素在x中且不在y中</td></tr><tr><td>np.setxorld(x,y)</td><td>集合对称差，在一个数组中单不同时存在于两个数组</td></tr></tbody></table></div><p><img src="http://zzuzyj.github.io/2022/04/20/numpylearn/1650631250561.png" alt="1650631250561"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.arange(<span class="number">101</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&gt;&gt;&gt; &quot;</span>, a)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&gt;&gt;&gt; &quot;</span>, np.<span class="built_in">sum</span>(a))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&gt;&gt;&gt; &quot;</span>, np.mean(a))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&gt;&gt;&gt; &quot;</span>, np.std(a))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;------------------------------------------------------------------------------------------&quot;</span>)</span><br><span class="line">a = np.array([<span class="number">80</span>, <span class="number">67</span>, <span class="number">61</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&gt;&gt;&gt; &quot;</span>, np.average(a))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&gt;&gt;&gt; &quot;</span>, np.mean(a))</span><br><span class="line">weight = [<span class="number">60</span>, <span class="number">20</span>, <span class="number">20</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&gt;&gt;&gt; &quot;</span>, np.average(a, weights=weight))</span><br><span class="line"><span class="comment"># &gt;&gt;&gt;  [  0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17</span></span><br><span class="line"><span class="comment">#   18  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35</span></span><br><span class="line"><span class="comment">#   36  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53</span></span><br><span class="line"><span class="comment">#   54  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71</span></span><br><span class="line"><span class="comment">#   72  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89</span></span><br><span class="line"><span class="comment">#   90  91  92  93  94  95  96  97  98  99 100]</span></span><br><span class="line"><span class="comment"># &gt;&gt;&gt;  5050</span></span><br><span class="line"><span class="comment"># &gt;&gt;&gt;  50.0</span></span><br><span class="line"><span class="comment"># &gt;&gt;&gt;  29.154759474226502</span></span><br><span class="line"><span class="comment"># ------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># &gt;&gt;&gt;  69.33333333333333</span></span><br><span class="line"><span class="comment"># &gt;&gt;&gt;  69.33333333333333</span></span><br><span class="line"><span class="comment"># &gt;&gt;&gt;  73.6</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#numpy&quot;&gt;numpy&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#官方文档-httpsnumpyorgdocstablereference&quot;&gt;官方文档 https://numpy.org/doc/stable/r</summary>
      
    
    
    
    <category term="python" scheme="http://zzuzyj.github.io/categories/python/"/>
    
    
    <category term="numpy" scheme="http://zzuzyj.github.io/tags/numpy/"/>
    
  </entry>
  
  <entry>
    <title>RSA攻击</title>
    <link href="http://zzuzyj.github.io/2022/04/18/RSA/"/>
    <id>http://zzuzyj.github.io/2022/04/18/RSA/</id>
    <published>2022-04-18T12:29:33.706Z</published>
    <updated>2022-04-19T03:01:04.826Z</updated>
    
    <content type="html"><![CDATA[<hr><h2><span id="基础类型给定pqec">基础类型，给定p,q,e,c</span></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> libnum <span class="keyword">import</span> *</span><br><span class="line">p=</span><br><span class="line">q=</span><br><span class="line">e=</span><br><span class="line">c=</span><br><span class="line">n=p*q</span><br><span class="line">phi=(p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d=invmod(e,phi)</span><br><span class="line">m=<span class="built_in">pow</span>(c,d,n)</span><br><span class="line"><span class="built_in">print</span>(n2s(<span class="built_in">int</span>(m)))</span><br></pre></td></tr></table></figure><h2><span id="可直接分解的npq">可直接分解的N（p,q）</span></h2><p>运用yafu分解</p><p>运用网站在线分解 <a href="http://www.factordb.com/">http://www.factordb.com</a> </p><h2><span id="小e攻击">小e攻击</span></h2><p>e非常小，可以直接开根拿到m</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> libnum <span class="keyword">import</span> *</span><br><span class="line">k=<span class="number">0</span></span><br><span class="line">e=</span><br><span class="line">c=</span><br><span class="line">n=</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    m=c+n*k</span><br><span class="line">    k+=<span class="number">1</span></span><br><span class="line">    flag=iroot(m,e)</span><br><span class="line">    <span class="keyword">if</span>(flag[<span class="number">0</span>]):</span><br><span class="line">        <span class="built_in">print</span>(n2s(<span class="built_in">int</span>(flag[<span class="number">1</span>])))</span><br></pre></td></tr></table></figure><h2><span id="共模攻击nm相同ce不同">共模攻击（n,m相同，c,e不同）</span></h2><p>n不变，可以根据e1,e2,c1,c2,n可以不求d1,d2直接求解m</p><p> e1,e2互素  gcd(e1,e2)=1</p><script type="math/tex; mode=display">则 e1*s1+e2*s2=1,s1,s2均为整数，s1,s2一正一负，通过gmpy2 的gcdext(e1,e2)可以计算出(s1,s2)\\又 c_1 \equiv m^{e_1} \bmod n,c_2\equiv m^{e_2}\bmod n.\\则(c_1^{s_1}c_2^{s_2})\bmod n = ((m^{e_1}\bmod n)^{s_1}(m^{e_2}\bmod n)^{s_2})\bmod n\\化简 (c_1^{s_1}c_2^{s_2})\bmod n = (m^{e_1s_1+e_2s_2})\bmod n\\又e1*s1+e2*s2=1\\则c_1^{s_1}*c_2^{s_2}=m</script><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> libnum <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">deattack</span>(<span class="params">e1,e2,c1,c2,n</span>):</span><br><span class="line">    g,s1,s2=gcdext(e1,e2)</span><br><span class="line">    <span class="keyword">if</span> s1&lt;<span class="number">0</span>:</span><br><span class="line">        s1=-s1</span><br><span class="line">        c1=invert(c1,n)</span><br><span class="line">    <span class="keyword">if</span> s2&lt;<span class="number">0</span>:</span><br><span class="line">        s2=-s2</span><br><span class="line">        c2=invert(c2,n)</span><br><span class="line">    m=<span class="built_in">pow</span>(c1,s1,n)*<span class="built_in">pow</span>(c2,s2,n)%n</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">int</span>(m)</span><br><span class="line">e1=</span><br><span class="line">e2=</span><br><span class="line">c1=</span><br><span class="line">c2=</span><br><span class="line">n=</span><br><span class="line">flag=deattack(e1,e2,c1,c2,n)</span><br><span class="line"><span class="built_in">print</span>(n2s(flag))</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;h2&gt;&lt;span id=&quot;基础类型给定pqec&quot;&gt;基础类型，给定p,q,e,c&lt;/span&gt;&lt;/h2&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;li</summary>
      
    
    
    
    <category term="Crypto" scheme="http://zzuzyj.github.io/categories/Crypto/"/>
    
    
    <category term="RSA" scheme="http://zzuzyj.github.io/tags/RSA/"/>
    
  </entry>
  
</feed>
